using OPMS.Models;
using OPMS.Utility.Attributes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Collections;

namespace OPMS.Controls
{
    public class CustomDataGrid : DataGrid
    {

        public CustomDataGrid()
        {
            AutoGeneratingColumn += CustomDataGrid_AutoGeneratedColumns;
            AutoGeneratingColumn += CustomDataGrid_AutoGeneratingColumn;
            this.Loaded += CustomDataGrid_Loaded;
            Style = FindResource("CustomDataGrid") as Style;
        }

        private void CustomDataGrid_Loaded(object sender, RoutedEventArgs e)
        {
            //foreach (var column in this.Columns)
            //{
            //    column.MinWidth = column.ActualWidth;
            //    column.Width = new DataGridLength(1, DataGridLengthUnitType.Star);
            //}
        }

        private void CustomDataGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            var type = (PropertyDescriptor)e.PropertyDescriptor;
            var attributes = type.Attributes;

            foreach(var attr in attributes)
            {
                if (attr is IgnoreColumnAttribute)
                {
                    e.Column.Visibility = Visibility.Hidden;
                }
            }

            if(e.PropertyName.Equals(nameof(ModelBase.Acknowledgement)) || e.PropertyName.Equals(nameof(ModelBase.Error)))
            {
                e.Column.Visibility = Visibility.Hidden;
            }
        }

        protected override void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue)
        {
            base.OnItemsSourceChanged(oldValue, newValue);
            //foreach (var column in this.Columns)
            //{
            //    column.MinWidth = column.ActualWidth;
            //    column.Width = new DataGridLength(1, DataGridLengthUnitType.Star);
            //}
        }

        private void CustomDataGrid_AutoGeneratedColumns(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            e.Column.Header = SplitCamelCase(e.Column.Header.ToString());
        }

        public string SplitCamelCase(string str)
        {
            return Regex.Replace(
                Regex.Replace(
                    str,
                    @"(\P{Ll})(\P{Ll}\p{Ll})",
                    "$1 $2"
                ),
                @"(\p{Ll})(\P{Ll})",
                "$1 $2"
            );
        }
    }
}
